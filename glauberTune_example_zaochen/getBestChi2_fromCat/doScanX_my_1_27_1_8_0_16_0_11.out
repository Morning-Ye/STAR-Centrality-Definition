  *******************************************
  *                                         *
  *        W E L C O M E  to  R O O T       *
  *                                         *
  *   Version   5.34/30     23 April 2015   *
  *                                         *
  *  You are welcome to visit our Web site  *
  *          http://root.cern.ch            *
  *                                         *
  *******************************************

ROOT 5.34/30 (v5-34-30@v5-34-30, Apr 23 2015, 18:31:46 on linux)

CINT/ROOT C/C++ Interpreter version 5.18.00, July 2, 2010
Type ? for help. Commands must be C++ statements.
Enclose multiple statements between { }.
*** Float Point Exception is OFF ***
 *** Start at Date : Mon Jul 29 01:44:30 2019
QAInfo:You are using STAR_LEVEL : SL19b, ROOT_LEVEL : 5.34.30 and node : rcas6351.rcf.bnl.gov 
StInfo: StNbdFitMaker::setMinimumMultiplicityCut  Set low multiplicity cut off : M > 50
StInfo: StNegativeBinomial  (npp, k, x, eff, trig. bias) = (1.270, 1.800, 0.160, 0.110, 1.000)
StInfo: StNegativeBinomial  Use multiplicity dependent efficiency
StInfo: StNbdFitMaker::readData  open Data file: run18_27Gev_MB_refMultCorr.root
StInfo: StNbdFitMaker::readData  open Glauber file: ncoll_npart.root
StInfo: StNbdFitMaker::Scan  Fitting for (npp, k) = (1.270, 1.800) ...
StInfo: StNegativeBinomial  (npp, k, x, eff, trig. bias) = (1.270, 1.800, 0.160, 0.110, 1.000)
StInfo: StNegativeBinomial  Use multiplicity dependent efficiency
StInfo: StGlauberUtilities  Initialize StGlauberUtilities
StInfo: StGlauberUtilities  Set random number seed = 794588252
StInfo: StGlauberUtilities  Set impact parameter distributions: 0 < b < 20 fm
StInfo: StNbdFitMaker::Fit  ievent=         0  (npart, ncoll, mult) = (       369,       1035,        329)
StInfo: StNbdFitMaker::Fit  ievent=    100000  (npart, ncoll, mult) = (        21,         21,         14)
StInfo: StNbdFitMaker::Fit  ievent=    200000  (npart, ncoll, mult) = (       123,        176,        102)
StInfo: StNbdFitMaker::Fit  ievent=    300000  (npart, ncoll, mult) = (         2,          1,          2)
StInfo: StNbdFitMaker::Fit  ievent=    400000  (npart, ncoll, mult) = (        17,         15,         10)
StInfo: StNbdFitMaker::Fit  ievent=    500000  (npart, ncoll, mult) = (        30,         37,         15)
StInfo: StNbdFitMaker::Fit  ievent=    600000  (npart, ncoll, mult) = (        39,         35,         34)
StInfo: StNbdFitMaker::Fit  ievent=    700000  (npart, ncoll, mult) = (        56,         64,         42)
StInfo: StNbdFitMaker::Fit  ievent=    800000  (npart, ncoll, mult) = (        12,          9,          5)
StInfo: StNbdFitMaker::Fit  ievent=    900000  (npart, ncoll, mult) = (       193,        336,        161)
StInfo: StNbdFitMaker::GetNormalization  (min, max, norm) = (   50,   500, 108.9173253)
StInfo: StNbdFitMaker::calculateChi2  M >    50: (npp, k) = (1.27000, 1.80000)  chi2/ndata = 78681.983/  450 = 174.849
StInfo: StNbdFitMaker::CalculateCentrality  (1) Centrality determination from peripheral to central
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 75-80 %, cut = 0.80
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 70-75 %, cut = 0.75
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 65-70 %, cut = 0.70
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 60-65 %, cut = 0.65
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 55-60 %, cut = 0.60
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 50-55 %, cut = 0.55
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 45-50 %, cut = 0.50
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 40-45 %, cut = 0.45
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 35-40 %, cut = 0.40
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 30-35 %, cut = 0.35
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 25-30 %, cut = 0.30
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 20-25 %, cut = 0.25
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 15-20 %, cut = 0.20
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 10-15 %, cut = 0.15
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 5-10 %, cut = 0.10
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 0-5 %, cut = 0.05
75.00 - 80.00 (%) :  M >    6 (im=  6, M=6.5, bin=   0) (sum, total, fraction>cut) = (23181201.090, 108917325.275, 0.787>0.800)
70.00 - 75.00 (%) :  M >    9 (im=  9, M=9.5, bin=   1) (sum, total, fraction>cut) = (28430580.499, 108917325.275, 0.739>0.750)
65.00 - 70.00 (%) :  M >   13 (im= 13, M=13.5, bin=   2) (sum, total, fraction>cut) = (33656433.766, 108917325.275, 0.691>0.700)
60.00 - 65.00 (%) :  M >   18 (im= 18, M=18.5, bin=   3) (sum, total, fraction>cut) = (38673492.520, 108917325.275, 0.645>0.650)
55.00 - 60.00 (%) :  M >   25 (im= 25, M=25.5, bin=   4) (sum, total, fraction>cut) = (44161074.120, 108917325.275, 0.595>0.600)
50.00 - 55.00 (%) :  M >   33 (im= 33, M=33.5, bin=   5) (sum, total, fraction>cut) = (49122693.955, 108917325.275, 0.549>0.550)
45.00 - 50.00 (%) :  M >   44 (im= 44, M=44.5, bin=   6) (sum, total, fraction>cut) = (54737382.073, 108917325.275, 0.497>0.500)
40.00 - 45.00 (%) :  M >   57 (im= 57, M=57.5, bin=   7) (sum, total, fraction>cut) = (60145780.777, 108917325.275, 0.448>0.450)
35.00 - 40.00 (%) :  M >   72 (im= 72, M=72.5, bin=   8) (sum, total, fraction>cut) = (65355732.114, 108917325.275, 0.400>0.400)
30.00 - 35.00 (%) :  M >   91 (im= 91, M=91.5, bin=   9) (sum, total, fraction>cut) = (70968568.638, 108917325.275, 0.348>0.350)
25.00 - 30.00 (%) :  M >  113 (im=113, M=113.5, bin=  10) (sum, total, fraction>cut) = (76426197.972, 108917325.275, 0.298>0.300)
20.00 - 25.00 (%) :  M >  138 (im=138, M=138.5, bin=  11) (sum, total, fraction>cut) = (81708034.744, 108917325.275, 0.250>0.250)
15.00 - 20.00 (%) :  M >  169 (im=169, M=169.5, bin=  12) (sum, total, fraction>cut) = (87278175.676, 108917325.275, 0.199>0.200)
10.00 - 15.00 (%) :  M >  204 (im=204, M=204.5, bin=  13) (sum, total, fraction>cut) = (92711080.778, 108917325.275, 0.149>0.150)
5.00 - 10.00 (%) :  M >  245 (im=245, M=245.5, bin=  14) (sum, total, fraction>cut) = (98074932.296, 108917325.275, 0.100>0.100)
0.00 - 5.00 (%) :  M >  295 (im=295, M=295.5, bin=  15) (sum, total, fraction>cut) = (103486707.437, 108917325.275, 0.050>0.050)
71.25 - 76.00 (%) :  M >    8 (im=  8, M=8.5, bin=   0) (sum, total, fraction>cut) = (26845506.665, 108917325.275, 0.754>0.760)
66.50 - 71.25 (%) :  M >   12 (im= 12, M=12.5, bin=   1) (sum, total, fraction>cut) = (32499840.689, 108917325.275, 0.702>0.712)
61.75 - 66.50 (%) :  M >   16 (im= 16, M=16.5, bin=   2) (sum, total, fraction>cut) = (36828433.030, 108917325.275, 0.662>0.665)
57.00 - 61.75 (%) :  M >   22 (im= 22, M=22.5, bin=   3) (sum, total, fraction>cut) = (41972489.385, 108917325.275, 0.615>0.617)
52.25 - 57.00 (%) :  M >   30 (im= 30, M=30.5, bin=   4) (sum, total, fraction>cut) = (47374897.636, 108917325.275, 0.565>0.570)
47.50 - 52.25 (%) :  M >   39 (im= 39, M=39.5, bin=   5) (sum, total, fraction>cut) = (52302753.101, 108917325.275, 0.520>0.522)
42.75 - 47.50 (%) :  M >   50 (im= 50, M=50.5, bin=   6) (sum, total, fraction>cut) = (57363052.033, 108917325.275, 0.473>0.475)
38.00 - 42.75 (%) :  M >   64 (im= 64, M=64.5, bin=   7) (sum, total, fraction>cut) = (62690851.917, 108917325.275, 0.424>0.427)
33.25 - 38.00 (%) :  M >   79 (im= 79, M=79.5, bin=   8) (sum, total, fraction>cut) = (67535167.793, 108917325.275, 0.380>0.380)
28.50 - 33.25 (%) :  M >   98 (im= 98, M=98.5, bin=   9) (sum, total, fraction>cut) = (72791191.159, 108917325.275, 0.332>0.333)
23.75 - 28.50 (%) :  M >  120 (im=120, M=120.5, bin=  10) (sum, total, fraction>cut) = (77982190.881, 108917325.275, 0.284>0.285)
19.00 - 23.75 (%) :  M >  146 (im=146, M=146.5, bin=  11) (sum, total, fraction>cut) = (83235709.149, 108917325.275, 0.236>0.237)
14.25 - 19.00 (%) :  M >  175 (im=175, M=175.5, bin=  12) (sum, total, fraction>cut) = (88258976.190, 108917325.275, 0.190>0.190)
9.50 - 14.25 (%) :  M >  209 (im=209, M=209.5, bin=  13) (sum, total, fraction>cut) = (93403903.884, 108917325.275, 0.142>0.143)
4.75 - 9.50 (%) :  M >  250 (im=250, M=250.5, bin=  14) (sum, total, fraction>cut) = (98668967.388, 108917325.275, 0.094>0.095)
0.00 - 4.75 (%) :  M >  298 (im=298, M=298.5, bin=  15) (sum, total, fraction>cut) = (103780566.381, 108917325.275, 0.047>0.048)
78.75 - 84.00 (%) :  M >    4 (im=  4, M=4.5, bin=   0) (sum, total, fraction>cut) = (18649042.268, 108917325.275, 0.829>0.840)
73.50 - 78.75 (%) :  M >    6 (im=  6, M=6.5, bin=   1) (sum, total, fraction>cut) = (23181201.090, 108917325.275, 0.787>0.788)
68.25 - 73.50 (%) :  M >   10 (im= 10, M=10.5, bin=   2) (sum, total, fraction>cut) = (29897696.871, 108917325.275, 0.726>0.735)
63.00 - 68.25 (%) :  M >   14 (im= 14, M=14.5, bin=   3) (sum, total, fraction>cut) = (34768697.492, 108917325.275, 0.681>0.683)
57.75 - 63.00 (%) :  M >   20 (im= 20, M=20.5, bin=   4) (sum, total, fraction>cut) = (40403208.563, 108917325.275, 0.629>0.630)
52.50 - 57.75 (%) :  M >   28 (im= 28, M=28.5, bin=   5) (sum, total, fraction>cut) = (46150122.314, 108917325.275, 0.576>0.578)
47.25 - 52.50 (%) :  M >   38 (im= 38, M=38.5, bin=   6) (sum, total, fraction>cut) = (51797703.464, 108917325.275, 0.524>0.525)
42.00 - 47.25 (%) :  M >   51 (im= 51, M=51.5, bin=   7) (sum, total, fraction>cut) = (57767897.731, 108917325.275, 0.470>0.473)
36.75 - 42.00 (%) :  M >   66 (im= 66, M=66.5, bin=   8) (sum, total, fraction>cut) = (63367882.011, 108917325.275, 0.418>0.420)
31.50 - 36.75 (%) :  M >   84 (im= 84, M=84.5, bin=   9) (sum, total, fraction>cut) = (69021344.696, 108917325.275, 0.366>0.368)
26.25 - 31.50 (%) :  M >  106 (im=106, M=106.5, bin=  10) (sum, total, fraction>cut) = (74777298.585, 108917325.275, 0.313>0.315)
21.00 - 26.25 (%) :  M >  132 (im=132, M=132.5, bin=  11) (sum, total, fraction>cut) = (80522360.741, 108917325.275, 0.261>0.263)
15.75 - 21.00 (%) :  M >  162 (im=162, M=162.5, bin=  12) (sum, total, fraction>cut) = (86096095.945, 108917325.275, 0.210>0.210)
10.50 - 15.75 (%) :  M >  198 (im=198, M=198.5, bin=  13) (sum, total, fraction>cut) = (91841049.184, 108917325.275, 0.157>0.158)
5.25 - 10.50 (%) :  M >  241 (im=241, M=241.5, bin=  14) (sum, total, fraction>cut) = (97596676.321, 108917325.275, 0.104>0.105)
0.00 - 5.25 (%) :  M >  293 (im=293, M=293.5, bin=  15) (sum, total, fraction>cut) = (103283467.708, 108917325.275, 0.052>0.053)
StInfo: StNbdFitMaker::CalculateCentrality  (2) Centrality determination from central to peripheral
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 0-5 %, cut = 0.05
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 5-10 %, cut = 0.10
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 10-15 %, cut = 0.15
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 15-20 %, cut = 0.20
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 20-25 %, cut = 0.25
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 25-30 %, cut = 0.30
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 30-35 %, cut = 0.35
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 35-40 %, cut = 0.40
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 40-45 %, cut = 0.45
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 45-50 %, cut = 0.50
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 50-55 %, cut = 0.55
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 55-60 %, cut = 0.60
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 60-65 %, cut = 0.65
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 65-70 %, cut = 0.70
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 70-75 %, cut = 0.75
StInfo: StNbdFitMaker::CalculateCentrality  Centrality: 75-80 %, cut = 0.80
0.00 - 5.00 (%) :  M >  295 (im=204, M=295.5, bin=   0) (sum, total, fraction>cut) = (5538663.825, 108917325.275, 0.051>0.050)
5.00 - 10.00 (%) :  M >  245 (im=254, M=245.5, bin=   1) (sum, total, fraction>cut) = (10961221.781, 108917325.275, 0.101>0.100)
10.00 - 15.00 (%) :  M >  204 (im=295, M=204.5, bin=   2) (sum, total, fraction>cut) = (16356223.654, 108917325.275, 0.150>0.150)
15.00 - 20.00 (%) :  M >  169 (im=330, M=169.5, bin=   3) (sum, total, fraction>cut) = (21803723.678, 108917325.275, 0.200>0.200)
20.00 - 25.00 (%) :  M >  138 (im=361, M=138.5, bin=   4) (sum, total, fraction>cut) = (27400549.354, 108917325.275, 0.252>0.250)
25.00 - 30.00 (%) :  M >  113 (im=386, M=113.5, bin=   5) (sum, total, fraction>cut) = (32721923.115, 108917325.275, 0.300>0.300)
30.00 - 35.00 (%) :  M >   91 (im=408, M=91.5, bin=   6) (sum, total, fraction>cut) = (38223228.297, 108917325.275, 0.351>0.350)
35.00 - 40.00 (%) :  M >   72 (im=427, M=72.5, bin=   7) (sum, total, fraction>cut) = (43880394.172, 108917325.275, 0.403>0.400)
40.00 - 45.00 (%) :  M >   57 (im=442, M=57.5, bin=   8) (sum, total, fraction>cut) = (49151448.129, 108917325.275, 0.451>0.450)
45.00 - 50.00 (%) :  M >   44 (im=455, M=44.5, bin=   9) (sum, total, fraction>cut) = (54650030.378, 108917325.275, 0.502>0.500)
50.00 - 55.00 (%) :  M >   33 (im=466, M=33.5, bin=  10) (sum, total, fraction>cut) = (60363288.675, 108917325.275, 0.554>0.550)
55.00 - 60.00 (%) :  M >   25 (im=474, M=25.5, bin=  11) (sum, total, fraction>cut) = (65474451.999, 108917325.275, 0.601>0.600)
60.00 - 65.00 (%) :  M >   18 (im=481, M=18.5, bin=  12) (sum, total, fraction>cut) = (71147193.051, 108917325.275, 0.653>0.650)
65.00 - 70.00 (%) :  M >   13 (im=486, M=13.5, bin=  13) (sum, total, fraction>cut) = (76417484.586, 108917325.275, 0.702>0.700)
70.00 - 75.00 (%) :  M >    9 (im=490, M=9.5, bin=  14) (sum, total, fraction>cut) = (82071818.611, 108917325.275, 0.754>0.750)
75.00 - 80.00 (%) :  M >    6 (im=493, M=6.5, bin=  15) (sum, total, fraction>cut) = (87877220.965, 108917325.275, 0.807>0.800)
0.00 - 4.75 (%) :  M >  298 (im=201, M=298.5, bin=   0) (sum, total, fraction>cut) = (5238705.511, 108917325.275, 0.048>0.048)
4.75 - 9.50 (%) :  M >  250 (im=249, M=250.5, bin=   1) (sum, total, fraction>cut) = (10363483.500, 108917325.275, 0.095>0.095)
9.50 - 14.25 (%) :  M >  209 (im=290, M=209.5, bin=   2) (sum, total, fraction>cut) = (15647062.949, 108917325.275, 0.144>0.143)
14.25 - 19.00 (%) :  M >  175 (im=324, M=175.5, bin=   3) (sum, total, fraction>cut) = (20822160.742, 108917325.275, 0.191>0.190)
19.00 - 23.75 (%) :  M >  146 (im=353, M=146.5, bin=   4) (sum, total, fraction>cut) = (25872112.529, 108917325.275, 0.238>0.237)
23.75 - 28.50 (%) :  M >  120 (im=379, M=120.5, bin=   5) (sum, total, fraction>cut) = (31144364.576, 108917325.275, 0.286>0.285)
28.50 - 33.25 (%) :  M >   98 (im=401, M=98.5, bin=   6) (sum, total, fraction>cut) = (36380020.402, 108917325.275, 0.334>0.333)
33.25 - 38.00 (%) :  M >   79 (im=420, M=79.5, bin=   7) (sum, total, fraction>cut) = (41688868.670, 108917325.275, 0.383>0.380)
38.00 - 42.75 (%) :  M >   64 (im=435, M=64.5, bin=   8) (sum, total, fraction>cut) = (46581870.591, 108917325.275, 0.428>0.427)
42.75 - 47.50 (%) :  M >   50 (im=449, M=50.5, bin=   9) (sum, total, fraction>cut) = (51989942.543, 108917325.275, 0.477>0.475)
47.50 - 52.25 (%) :  M >   39 (im=460, M=39.5, bin=  10) (sum, total, fraction>cut) = (57119621.811, 108917325.275, 0.524>0.522)
52.25 - 57.00 (%) :  M >   30 (im=469, M=30.5, bin=  11) (sum, total, fraction>cut) = (62150295.231, 108917325.275, 0.571>0.570)
57.00 - 61.75 (%) :  M >   22 (im=477, M=22.5, bin=  12) (sum, total, fraction>cut) = (67709871.183, 108917325.275, 0.622>0.617)
61.75 - 66.50 (%) :  M >   16 (im=483, M=16.5, bin=  13) (sum, total, fraction>cut) = (73090495.969, 108917325.275, 0.671>0.665)
66.50 - 71.25 (%) :  M >   12 (im=487, M=12.5, bin=  14) (sum, total, fraction>cut) = (77677984.792, 108917325.275, 0.713>0.712)
71.25 - 76.00 (%) :  M >    8 (im=491, M=8.5, bin=  15) (sum, total, fraction>cut) = (83809921.287, 108917325.275, 0.769>0.760)
0.00 - 5.25 (%) :  M >  293 (im=206, M=293.5, bin=   0) (sum, total, fraction>cut) = (5728397.806, 108917325.275, 0.053>0.053)
5.25 - 10.50 (%) :  M >  241 (im=258, M=241.5, bin=   1) (sum, total, fraction>cut) = (11442745.276, 108917325.275, 0.105>0.105)
10.50 - 15.75 (%) :  M >  198 (im=301, M=198.5, bin=   2) (sum, total, fraction>cut) = (17218413.201, 108917325.275, 0.158>0.158)
15.75 - 21.00 (%) :  M >  162 (im=337, M=162.5, bin=   3) (sum, total, fraction>cut) = (22994190.043, 108917325.275, 0.211>0.210)
21.00 - 26.25 (%) :  M >  132 (im=367, M=132.5, bin=   4) (sum, total, fraction>cut) = (28601689.617, 108917325.275, 0.263>0.263)
26.25 - 31.50 (%) :  M >  106 (im=393, M=106.5, bin=   5) (sum, total, fraction>cut) = (34387922.523, 108917325.275, 0.316>0.315)
31.50 - 36.75 (%) :  M >   84 (im=415, M=84.5, bin=   6) (sum, total, fraction>cut) = (40188859.267, 108917325.275, 0.369>0.368)
36.75 - 42.00 (%) :  M >   66 (im=433, M=66.5, bin=   7) (sum, total, fraction>cut) = (45885017.544, 108917325.275, 0.421>0.420)
42.00 - 47.25 (%) :  M >   51 (im=448, M=51.5, bin=   8) (sum, total, fraction>cut) = (51554273.242, 108917325.275, 0.473>0.473)
47.25 - 52.50 (%) :  M >   38 (im=461, M=38.5, bin=   9) (sum, total, fraction>cut) = (57634909.677, 108917325.275, 0.529>0.525)
52.50 - 57.75 (%) :  M >   28 (im=471, M=28.5, bin=  10) (sum, total, fraction>cut) = (63416785.890, 108917325.275, 0.582>0.578)
57.75 - 63.00 (%) :  M >   20 (im=479, M=20.5, bin=  11) (sum, total, fraction>cut) = (69370533.641, 108917325.275, 0.637>0.630)
63.00 - 68.25 (%) :  M >   14 (im=485, M=14.5, bin=  12) (sum, total, fraction>cut) = (75260891.509, 108917325.275, 0.691>0.683)
68.25 - 73.50 (%) :  M >   10 (im=489, M=10.5, bin=  13) (sum, total, fraction>cut) = (80486744.776, 108917325.275, 0.739>0.735)
73.50 - 78.75 (%) :  M >    6 (im=493, M=6.5, bin=  14) (sum, total, fraction>cut) = (87877220.965, 108917325.275, 0.807>0.788)
78.75 - 84.00 (%) :  M >    4 (im=495, M=4.5, bin=  15) (sum, total, fraction>cut) = (93011148.009, 108917325.275, 0.854>0.840)
StInfo:   mMultiplicityCut[0].push_back( 295 ); mCentralityMin[0].push_back( 0.0 ); mCentralityMax[0].push_back( 5.0 );
StInfo:   mMultiplicityCut[0].push_back( 245 ); mCentralityMin[0].push_back( 5.0 ); mCentralityMax[0].push_back( 10.0 );
StInfo:   mMultiplicityCut[0].push_back( 204 ); mCentralityMin[0].push_back( 10.0 ); mCentralityMax[0].push_back( 15.0 );
StInfo:   mMultiplicityCut[0].push_back( 169 ); mCentralityMin[0].push_back( 15.0 ); mCentralityMax[0].push_back( 20.0 );
StInfo:   mMultiplicityCut[0].push_back( 138 ); mCentralityMin[0].push_back( 20.0 ); mCentralityMax[0].push_back( 25.0 );
StInfo:   mMultiplicityCut[0].push_back( 113 ); mCentralityMin[0].push_back( 25.0 ); mCentralityMax[0].push_back( 30.0 );
StInfo:   mMultiplicityCut[0].push_back(  91 ); mCentralityMin[0].push_back( 30.0 ); mCentralityMax[0].push_back( 35.0 );
StInfo:   mMultiplicityCut[0].push_back(  72 ); mCentralityMin[0].push_back( 35.0 ); mCentralityMax[0].push_back( 40.0 );
StInfo:   mMultiplicityCut[0].push_back(  57 ); mCentralityMin[0].push_back( 40.0 ); mCentralityMax[0].push_back( 45.0 );
StInfo:   mMultiplicityCut[0].push_back(  44 ); mCentralityMin[0].push_back( 45.0 ); mCentralityMax[0].push_back( 50.0 );
StInfo:   mMultiplicityCut[0].push_back(  33 ); mCentralityMin[0].push_back( 50.0 ); mCentralityMax[0].push_back( 55.0 );
StInfo:   mMultiplicityCut[0].push_back(  25 ); mCentralityMin[0].push_back( 55.0 ); mCentralityMax[0].push_back( 60.0 );
StInfo:   mMultiplicityCut[0].push_back(  18 ); mCentralityMin[0].push_back( 60.0 ); mCentralityMax[0].push_back( 65.0 );
StInfo:   mMultiplicityCut[0].push_back(  13 ); mCentralityMin[0].push_back( 65.0 ); mCentralityMax[0].push_back( 70.0 );
StInfo:   mMultiplicityCut[0].push_back(   9 ); mCentralityMin[0].push_back( 70.0 ); mCentralityMax[0].push_back( 75.0 );
StInfo:   mMultiplicityCut[0].push_back(   6 ); mCentralityMin[0].push_back( 75.0 ); mCentralityMax[0].push_back( 80.0 );
StInfo:   mMultiplicityCut[1].push_back( 298 );  mMultiplicityCut[2].push_back( 293 );
StInfo:   mMultiplicityCut[1].push_back( 250 );  mMultiplicityCut[2].push_back( 241 );
StInfo:   mMultiplicityCut[1].push_back( 209 );  mMultiplicityCut[2].push_back( 198 );
StInfo:   mMultiplicityCut[1].push_back( 175 );  mMultiplicityCut[2].push_back( 162 );
StInfo:   mMultiplicityCut[1].push_back( 146 );  mMultiplicityCut[2].push_back( 132 );
StInfo:   mMultiplicityCut[1].push_back( 120 );  mMultiplicityCut[2].push_back( 106 );
StInfo:   mMultiplicityCut[1].push_back(  98 );  mMultiplicityCut[2].push_back(  84 );
StInfo:   mMultiplicityCut[1].push_back(  79 );  mMultiplicityCut[2].push_back(  66 );
StInfo:   mMultiplicityCut[1].push_back(  64 );  mMultiplicityCut[2].push_back(  51 );
StInfo:   mMultiplicityCut[1].push_back(  50 );  mMultiplicityCut[2].push_back(  38 );
StInfo:   mMultiplicityCut[1].push_back(  39 );  mMultiplicityCut[2].push_back(  28 );
StInfo:   mMultiplicityCut[1].push_back(  30 );  mMultiplicityCut[2].push_back(  20 );
StInfo:   mMultiplicityCut[1].push_back(  22 );  mMultiplicityCut[2].push_back(  14 );
StInfo:   mMultiplicityCut[1].push_back(  16 );  mMultiplicityCut[2].push_back(  10 );
StInfo:   mMultiplicityCut[1].push_back(  12 );  mMultiplicityCut[2].push_back(   6 );
StInfo:   mMultiplicityCut[1].push_back(   8 );  mMultiplicityCut[2].push_back(   4 );
StInfo: StNbdFitMaker::Fit  Write output ROOT file : glauberSim/RatioChi2Files/Ratio_npp1.270_k1.800_x0.160_eff0.110.root
StInfo: StNbdFitMaker::Scan  Fitting for (npp, k, x, chi2/ndf) = (1.270, 1.800, 0.160, 78681.983/448=175.629) ...

This is the end of ROOT -- Goodbye

